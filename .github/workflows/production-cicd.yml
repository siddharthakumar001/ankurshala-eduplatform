name: AnkurShala Production CI/CD Pipeline

on:
  push:
    branches: [ ankurshala/prod-1.0-final ]
  pull_request:
    branches: [ ankurshala/prod-1.0-final ]

env:
  STORAGE_ACCOUNT: ankurimage
  CONTAINER_NAME: docker-images
  VM_IP: 74.225.207.72
  VM_USER: AnkurshalaVM
  REGISTRY: ankurshala.azurecr.io

jobs:
  # ---- Code Quality Check ----
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Backend Code Quality Check
      run: |
        cd backend
        ./mvnw clean compile -DskipTests
        ./mvnw spotbugs:check || echo "SpotBugs check completed with warnings"
        
    - name: Frontend Code Quality Check
      run: |
        cd frontend
        npm ci
        echo "Running ESLint..."
        npm run lint || echo "ESLint completed with warnings"
        echo "Running TypeScript type check..."
        npm run type-check || echo "TypeScript check completed with warnings"
        echo "Running security audit..."
        npm audit --audit-level=high || echo "Security audit completed with warnings"
        
    - name: Frontend Build Test
      run: |
        cd frontend
        echo "Testing frontend build..."
        npm run build
        echo "‚úÖ Frontend build successful"
        
        # Verify build output
        if [ -d ".next" ]; then
          echo "‚úÖ Next.js build output verified"
        else
          echo "‚ùå Next.js build output missing"
          exit 1
        fi

  # ---- Build and Push Images ----
  build-and-push:
    needs: code-quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ankurshala/prod-1.0-final'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Clean Docker Resources
      run: |
        docker system prune -f || true
        docker builder prune -f || true
        
    - name: Build Backend image
      run: |
        cd backend
        docker build --no-cache -t ankurshala/backend:prod-${{ github.sha }} .
        docker tag ankurshala/backend:prod-${{ github.sha }} ankurshala/backend:latest
        
    - name: Build Frontend image
      run: |
        cd frontend
        docker build --no-cache -t ankurshala/frontend:prod-${{ github.sha }} .
        docker tag ankurshala/frontend:prod-${{ github.sha }} ankurshala/frontend:latest
        
    - name: Save Backend image
      run: |
        docker save ankurshala/backend:prod-${{ github.sha }} -o backend-image.tar
        
    - name: Save Frontend image
      run: |
        docker save ankurshala/frontend:prod-${{ github.sha }} -o frontend-image.tar
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
    - name: Setup Azure Storage Container
      run: |
        echo "üîß Setting up Azure Storage container..."
        
        # Debug: Check if STORAGE_KEY is set (without exposing it)
        if [[ -z "${{ secrets.STORAGE_KEY }}" ]]; then
          echo "‚ùå STORAGE_KEY secret is not set in GitHub repository"
          echo "Please add the STORAGE_KEY secret to your repository settings"
          echo "Go to: Settings > Secrets and variables > Actions > New repository secret"
          echo "Name: STORAGE_KEY"
          echo "Value: Your Azure storage account key"
          exit 1
        fi
        echo "‚úÖ STORAGE_KEY secret is configured"
        
        # Debug: Test basic Azure CLI connectivity
        echo "Testing Azure CLI connectivity..."
        if ! az --version >/dev/null 2>&1; then
          echo "‚ùå Azure CLI is not working properly"
          exit 1
        fi
        echo "‚úÖ Azure CLI is working"
        
        # Debug: Test storage account access
        echo "Testing storage account access..."
        if ! az storage container list --account-name ${{ env.STORAGE_ACCOUNT }} --account-key ${{ secrets.STORAGE_KEY }} >/dev/null 2>&1; then
          echo "‚ùå Cannot access storage account '${{ env.STORAGE_ACCOUNT }}'"
          echo "Please check your STORAGE_KEY secret"
          exit 1
        fi
        echo "‚úÖ Storage account access successful"
        
        # Debug: List existing containers
        echo "Listing existing containers..."
        az storage container list \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }} \
          --output table
        
        # Check if container already exists
        echo "Checking if container '${{ env.CONTAINER_NAME }}' exists..."
        if az storage container show \
          --name ${{ env.CONTAINER_NAME }} \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }} >/dev/null 2>&1; then
          echo "‚úÖ Container '${{ env.CONTAINER_NAME }}' already exists"
        else
          echo "Container does not exist, creating..."
          
          # Create container with detailed output
          echo "Creating container with private access..."
          CONTAINER_RESULT=$(az storage container create \
            --name ${{ env.CONTAINER_NAME }} \
            --account-name ${{ env.STORAGE_ACCOUNT }} \
            --account-key ${{ secrets.STORAGE_KEY }} \
            --public-access off 2>&1)
          
          echo "Container creation result: $CONTAINER_RESULT"
          
          # Check if creation was successful
          if echo "$CONTAINER_RESULT" | grep -q '"created": true'; then
            echo "‚úÖ Container created successfully"
          else
            echo "‚ö†Ô∏è  Container creation returned false, but checking if it exists anyway..."
          fi
          
          # Verify container exists
          if az storage container show \
            --name ${{ env.CONTAINER_NAME }} \
            --account-name ${{ env.STORAGE_ACCOUNT }} \
            --account-key ${{ secrets.STORAGE_KEY }} >/dev/null 2>&1; then
            echo "‚úÖ Container '${{ env.CONTAINER_NAME }}' is ready for use"
          else
            echo "‚ùå Container verification failed"
            echo "Final container list:"
            az storage container list \
              --account-name ${{ env.STORAGE_ACCOUNT }} \
              --account-key ${{ secrets.STORAGE_KEY }} \
              --output table
            exit 1
          fi
        fi
        
    - name: Upload Backend to Azure Storage
      run: |
        echo "Pre-upload container verification..."
        if ! az storage container show \
          --name ${{ env.CONTAINER_NAME }} \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }} >/dev/null 2>&1; then
          echo "‚ùå Container verification failed before upload - aborting"
          exit 1
        fi
        
        echo "Uploading backend image to Azure Storage..."
        az storage blob upload \
          --container-name ${{ env.CONTAINER_NAME }} \
          --name "backend-prod-${{ github.sha }}.tar" \
          --file backend-image.tar \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }}
        echo "‚úÖ Backend image uploaded successfully"
          
    - name: Upload Frontend to Azure Storage
      run: |
        echo "Pre-upload container verification..."
        if ! az storage container show \
          --name ${{ env.CONTAINER_NAME }} \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }} >/dev/null 2>&1; then
          echo "‚ùå Container verification failed before upload - aborting"
          exit 1
        fi
        
        echo "Uploading frontend image to Azure Storage..."
        az storage blob upload \
          --container-name ${{ env.CONTAINER_NAME }} \
          --name "frontend-prod-${{ github.sha }}.tar" \
          --file frontend-image.tar \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }}
        echo "‚úÖ Frontend image uploaded successfully"
        
    - name: Verify Azure Storage Upload
      run: |
        echo "Verifying uploaded images..."
        az storage blob list \
          --container-name ${{ env.CONTAINER_NAME }} \
          --account-name ${{ env.STORAGE_ACCOUNT }} \
          --account-key ${{ secrets.STORAGE_KEY }} \
          --output table
        echo "‚úÖ Azure Storage verification completed"

  # ---- Deploy to Production ----
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ankurshala/prod-1.0-final'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Pre-deployment Health Check
      run: |
        echo "Checking current application status..."
        curl -f https://ankurshala.com/health || echo "Application may be down, proceeding with deployment"
        
    - name: Deploy to Production Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.VM_USER }}@${{ env.VM_IP }} << 'EOF'
          set -e
          echo "üöÄ Starting deployment process..."
          
          # Navigate to project directory
          cd /opt/ankurshala
          
          # Pull latest code
          echo "üì• Pulling latest code..."
          git pull origin ankurshala/prod-1.0-final
          
          # Run resource cleanup
          echo "üßπ Cleaning up resources..."
          docker system prune -f || echo "Cleanup completed with warnings"
          
          # Deploy application
          echo "üöÄ Deploying application..."
          ./scripts/deploy-production-fixed.sh
          
          echo "‚úÖ Deployment completed successfully!"
        EOF
        
    - name: Wait for Services
      run: |
        echo "‚è≥ Waiting for services to start..."
        sleep 60
        
    - name: Comprehensive Application Testing
      run: |
        echo "üß™ Starting comprehensive application testing..."
        
        # Test 1: Basic connectivity
        echo "Test 1: Basic connectivity"
        if curl -f -s https://ankurshala.com > /dev/null; then
          echo "‚úÖ Basic connectivity test passed"
        else
          echo "‚ùå Basic connectivity test failed"
          exit 1
        fi
        
        # Test 2: Health endpoint
        echo "Test 2: Health endpoint"
        HEALTH_RESPONSE=$(curl -s https://ankurshala.com/health)
        if [ "$HEALTH_RESPONSE" = "ok" ]; then
          echo "‚úÖ Health endpoint test passed"
        else
          echo "‚ùå Health endpoint test failed. Response: $HEALTH_RESPONSE"
          exit 1
        fi
        
        # Test 3: API endpoints
        echo "Test 3: API endpoints"
        if curl -f -s https://ankurshala.com/api/health > /dev/null; then
          echo "‚úÖ API health endpoint test passed"
        else
          echo "‚ùå API health endpoint test failed"
          exit 1
        fi
        
        # Test 4: Frontend pages
        echo "Test 4: Frontend pages"
        if curl -f -s https://ankurshala.com/login > /dev/null; then
          echo "‚úÖ Login page test passed"
        else
          echo "‚ùå Login page test failed"
          exit 1
        fi
        
        # Test 5: Static assets
        echo "Test 5: Static assets"
        if curl -f -s https://ankurshala.com/favicon.svg > /dev/null; then
          echo "‚úÖ Static assets test passed"
        else
          echo "‚ùå Static assets test failed"
          exit 1
        fi
        
        echo "üéâ All application tests passed!"
        
    - name: Performance Check
      run: |
        echo "‚ö° Running performance checks..."
        
        # Check response time
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://ankurshala.com)
        echo "Response time: ${RESPONSE_TIME}s"
        
        if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
          echo "‚úÖ Performance test passed (response time < 5s)"
        else
          echo "‚ö†Ô∏è Performance warning (response time >= 5s)"
        fi
        
    - name: Security Headers Check
      run: |
        echo "üîí Checking security headers..."
        
        HEADERS=$(curl -I -s https://ankurshala.com)
        
        if echo "$HEADERS" | grep -q "strict-transport-security"; then
          echo "‚úÖ HSTS header present"
        else
          echo "‚ö†Ô∏è HSTS header missing"
        fi
        
        if echo "$HEADERS" | grep -q "x-frame-options"; then
          echo "‚úÖ X-Frame-Options header present"
        else
          echo "‚ö†Ô∏è X-Frame-Options header missing"
        fi
        
        echo "üîí Security headers check completed"
        
    - name: Verify Services on VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.VM_USER }}@${{ env.VM_IP }} << 'EOF'
          echo "üîç Checking service status..."
          cd /opt/ankurshala
          docker compose -f docker-compose.prod.yml --env-file .env-prod ps
          
          echo "üìä Checking resource usage..."
          df -h /
          free -h
        EOF
        
    - name: Generate Deployment Report
      if: always()
      run: |
        echo "üìä Generating deployment report..."
        
        # Create report file
        REPORT_FILE="deployment-report-$(date +%Y%m%d-%H%M%S).txt"
        
        echo "=== ANKURSHALA DEPLOYMENT REPORT ===" > $REPORT_FILE
        echo "Deployment Time: $(date)" >> $REPORT_FILE
        echo "Git SHA: ${{ github.sha }}" >> $REPORT_FILE
        echo "Branch: ${{ github.ref_name }}" >> $REPORT_FILE
        echo "Workflow Run: ${{ github.run_id }}" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ DEPLOYMENT STATUS: SUCCESS" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "‚úÖ All tests passed" >> $REPORT_FILE
          echo "‚úÖ Application is accessible at https://ankurshala.com" >> $REPORT_FILE
          echo "‚úÖ Health endpoint responding" >> $REPORT_FILE
          echo "‚úÖ All services running" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "üîó Application URL: https://ankurshala.com" >> $REPORT_FILE
          echo "üîó Health Check: https://ankurshala.com/health" >> $REPORT_FILE
          echo "üîó API Health: https://ankurshala.com/api/health" >> $REPORT_FILE
        else
          echo "‚ùå DEPLOYMENT STATUS: FAILED" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "‚ùå Deployment failed - check logs above for details" >> $REPORT_FILE
          echo "‚ùå Application may not be accessible" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "üîç Troubleshooting steps:" >> $REPORT_FILE
          echo "1. Check GitHub Actions logs" >> $REPORT_FILE
          echo "2. Verify VM connectivity" >> $REPORT_FILE
          echo "3. Check Docker services status" >> $REPORT_FILE
          echo "4. Review application logs" >> $REPORT_FILE
        fi
        
        echo "" >> $REPORT_FILE
        echo "=== END OF REPORT ===" >> $REPORT_FILE
        
        # Display report
        cat $REPORT_FILE
        
        # Upload report as artifact
        echo "üìÅ Uploading deployment report..."
        
    - name: Upload Deployment Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.run_id }}
        path: deployment-report-*.txt
        retention-days: 30
        
    - name: Final Status Notification
      if: always()
      run: |
        echo ""
        echo "=========================================="
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ DEPLOYMENT SUCCESSFUL! üéâ"
          echo ""
          echo "‚úÖ AnkurShala is now live at: https://ankurshala.com"
          echo "‚úÖ Health check: https://ankurshala.com/health"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Production deployment completed"
          echo ""
          echo "üöÄ Your application is ready for users!"
        else
          echo "‚ùå DEPLOYMENT FAILED ‚ùå"
          echo ""
          echo "‚ùå Check the logs above for error details"
          echo "‚ùå Application may not be accessible"
          echo ""
          echo "üîß Next steps:"
          echo "1. Review error messages above"
          echo "2. Check GitHub Actions logs"
          echo "3. Verify VM and service status"
          echo "4. Re-run deployment after fixes"
        fi
        echo "=========================================="
