
version: '3.8'

services:
  # Database Service (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ankurshala_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ankurshala-network
    restart: unless-stopped

  # Redis Cache Service (Production)
  redis:
    image: redis:7-alpine
    container_name: ankurshala_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ankurshala-network
    restart: unless-stopped

  # Kafka Service (Production)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ankurshala_zookeeper_prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ankurshala-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ankurshala_kafka_prod
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ankurshala-network
    restart: unless-stopped

  # MailHog Service (Production - for email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ankurshala_mailhog_prod
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ankurshala-network
    restart: unless-stopped

  # Backend Service (Production)
  backend:
    image: ankurshala/backend:prod
    container_name: ankurshala_backend_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      mailhog:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      BANK_ENC_KEY: ${BANK_ENC_KEY}
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: production
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      KAFKA_BROKERS: kafka:29092
      DEMO_SEED_ON_START: ${DEMO_SEED_ON_START:-true}
      DEMO_ENV: ${DEMO_ENV:-prod}
      DEMO_FORCE: ${DEMO_FORCE:-true}
    networks:
      - ankurshala-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Service (Production)
  frontend:
    image: ankurshala/frontend:prod
    container_name: ankurshala_frontend_prod
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    networks:
      - ankurshala-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    image: nginx:1.25-alpine
    container_name: ankurshala_nginx_prod
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    # mount logs, certs, webroot and your conf.d
    volumes:
      - nginx_logs:/var/log/nginx
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - ankurshala-network
    # (optional) liveness; nginx:alpine has no curl/wget by default, so skip HC
    restart: unless-stopped  

volumes:
  postgres_data:
  redis_data:
  nginx_logs:
  certbot_certs:
  certbot_www:
  kafka_data:



networks:
  ankurshala-network:
    driver: bridge
